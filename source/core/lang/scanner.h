/*
 *******************************************************************************
 *      Copyright (C) 2012 Vasiliy Sheredeko
 *      MIT license. All Rights Reserved.
 *******************************************************************************
 */
#ifndef EXAMPLE_SCANNER_H
#define EXAMPLE_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL                                    \
    apus::lang::ApusParser::token_type             \
    apus::lang::ApusScanner::lex(                  \
	apus::lang::ApusParser::semantic_type* yylval, \
	apus::lang::ApusParser::location_type* yylloc  \
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer ApusFlexLexer
#undef yylex
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "parser.hpp"

namespace apus {
namespace lang {

    /** Scanner is a derived class to add some extra function to the scanner
     * class. Flex itself creates a class named yyFlexLexer, which is renamed using
     * macros to ApusFlexLexer. However we change the context of the generated
     * yylex() function to be contained within the Scanner class. This is required
     * because the yylex() defined in ApusFlexLexer has no parameters. */
    class ApusScanner : public ApusFlexLexer
    {
    public:
        /** Create a new scanner object. The streams arg_yyin and arg_yyout default
         * to cin and cout, but that assignment is only made when initializing in
         * yylex(). */
        ApusScanner(std::istream* arg_yyin = 0,
    	    std::ostream* arg_yyout = 0);

        /** Required for virtual functions */
        virtual ~ApusScanner();

        /** This is the main lexing function. It is generated by flex according to
         * the macro declaration YY_DECL above. The generated bison parser then
         * calls this virtual function to fetch new tokens. */
        virtual ApusParser::token_type lex(
    	   ApusParser::semantic_type* yylval,
    	   ApusParser::location_type* yylloc
    	);

        /// Save buffer for lexer
        virtual int LexerInput(char* buf, int max_size);

        virtual void LexerError(const char* msg);

        /// Discard all unknwon function
        virtual void LexerOutput(const char* buf, int size);

        /** Enable debug output (via arg_yyout) if compiled into the scanner. */
        void set_debug(bool b);
    };
} // namespace lang
} // namespace apus

#endif // EXAMPLE_SCANNER_H
